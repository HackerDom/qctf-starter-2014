#!/usr/bin/perl

use strict;
use warnings;

print "Welcome!\n[L]ogin or [R]egister?\n";

use IO::File;
use File::Basename;

++$|;
$\ = $/ = undef;

my $file = IO::File->new(dirname(__FILE__)."/data");
my $data = <$file>;
undef $file;

my @records = split /\s+/, $data;
my %user = ();

for my $record (@records) {
	my $type = substr $record, 0, 1;
	substr($record, 0, 1) = '';
	my @record = split ":", $record;
	my $login = shift @record;
	$user{$login} //= { secrets => [] };
	if ($type eq 'S') {
		push @{ $user{$login}->{secrets} }, @record;
	} elsif ($type eq 'U') {
		my $password = shift @record;
		$user{$login}->{password} = $password;
	}
}

$/ = "\n";

my $mode = <>;
chomp $mode;
exit unless $mode =~ /^[LR]$/;

my ($login, $password);

sub read_login {
	print "login: ";
	$login = <>;
	chomp $login;
	die "No spaces and ':'!\n" if $login =~ /[\s:]/;
};

sub read_password {
	print "password: ";
	$password = <>;
	chomp $password;
	die "No spaces and ':'!\n" if $password =~ /[\s:]/;
};

$file = IO::File->new("data", O_WRONLY|O_APPEND);
$file->autoflush();

if ($mode eq 'L') {
	read_login;
	die "No such user!\n" unless $user{$login};
	read_password;
	die "Wrong password!\n" unless $user{$login}->{password} eq $password;
	die "This account is disabled: password is too short!\n" if length $user{$login}->{password} < 8;
	print "Hello, $login! Your secrets:\n" . join("\n", @{ $user{$login}->{secrets} }) . "\n";
} elsif ($mode eq 'R') {
	read_login;
	die "User already exists!\n" if $user{$login};
	read_password;
	die "Password is too short, use at least 8 symols!\n" if length $password < 8;
	print $file " U${login}:${password}";
}

my @new_secrets = ();
print "\nAdd new secrets. Press [ENTER] to exit.\n";
while (1) {
	print "secret: ";
	my $secret = <>;
	chomp $secret;
	last if $secret eq "";
	if ($secret =~ /[ :]/) {
		print "No spaces and ':'!\n";
		next;
	}
	push @new_secrets, $secret;
}
print $file " S${login}:" . join(":", @new_secrets) if @new_secrets;
undef $file;
